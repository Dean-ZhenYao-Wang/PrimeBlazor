@typeparam TItem
@implements IAsyncDisposable
@inject IJSRuntime JS
<div @ref=el></div>
@code {
    private ElementReference el;
    [Parameter] public List<TItem>? events { get; set; }
    [Parameter] public object? options { get; set; }
    private string Id = Guid.NewGuid().ToString();
    private IJSObjectReference module;
    private List<TItem>? oldEvents;
    private object? oldOptions;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        module = await JS.InvokeAsync<IJSObjectReference>("import", "./_content/PrimeBlazor/FullCalendar.razor.js");
        if (firstRender)
        {
            await JS.InvokeVoidAsync("FullCalendar.mounted", Id, el, options, events);
            oldEvents = events;
            oldOptions = options;
        }
        else
        {
            if ((oldEvents == null && events != null) || (oldEvents != null && events == null) || (oldEvents.Except(events).Any()))
            {
                oldEvents = events;
                await JS.InvokeVoidAsync("FullCalendar.events", Id, this.events);
            }
            if ((oldOptions == null && options != null) || (oldOptions != null && options == null) || (!oldOptions.GetHashCode().Equals(options.GetHashCode())))
            {
                oldOptions = options;
                await JS.InvokeVoidAsync("FullCalendar.options", Id, this.options);
            }
            await JS.InvokeVoidAsync("FullCalendar.updated", Id, el, options, events);
        }
    }
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        await JS.InvokeVoidAsync("FullCalendar.beforeDestroy", Id);
        if (module is not null)
            await module.DisposeAsync();
    }
}
