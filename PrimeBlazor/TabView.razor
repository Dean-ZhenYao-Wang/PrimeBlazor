<div class="p-tabview p-component p-tabview-top @CssClass">
    <CascadingValue Value="this">
        <ul class="p-tabview-nav p-reset" role="tablist">
            @foreach (var tab in tabs)
            {
                <li role="presentation" @key="tab.header" class="p-unselectable-text @(tab.active?"p-highlight":null) @(tab.disabled?"p-disabled":null)">
                    <a role="tab" @onclick="async()=>await onTabClick(tab)" @onkeydown="async(e)=>await keyDown(e,tab)">
                        @if (tab.Headertemplate is not null)
                        {
                            @tab.Headertemplate
                        }
                        else
                        {
                            <span class="p-tabview-title">@tab.header</span>
                        }
                    </a>
                </li>
            }
        </ul>
        <div class="p-tabview-panels">
            @ChildContent
        </div>
    </CascadingValue>
</div>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; } = null;
    [Parameter] public string CssClass { get; set; }
    [Parameter] public EventCallback<TabPanel> tabchange { get; set; }
    private List<TabPanel> tabs { get; set; } = new List<TabPanel>();
    protected override void OnAfterRender(bool firstRender)
    {
        TabPanel? activeTab = this.findActiveTab();
        if (activateTab == null && this.tabs.Count > 0)
            this.tabs[0].active = true;
    }
    public void addTab(TabPanel tab)
    {
        this.tabs.Add(tab);
        StateHasChanged();
    }
    private async Task onTabClick(TabPanel tab)
    {
        if (!tab.disabled && !tab.active)
        {
            this.activateTab(tab);
            await tabchange.InvokeAsync(tab);
        }
    }
    private async Task keyDown(KeyboardEventArgs eventArgs, TabPanel tab)
    {
        if (eventArgs.Key.Equals("Enter"))
            await onTabClick(tab);
    }
    private void activateTab(TabPanel tab)
    {
        for (int i = 0; i < this.tabs.Count; i++)
        {
            this.tabs[i].active = this.tabs[i] == tab;
        }
    }
    private TabPanel? findActiveTab()
    {
        TabPanel? activeTab = null;
        for(int i = 0; i < this.tabs.Count; i++)
        {
            TabPanel tab = this.tabs[i];
            if (tab.active)
            {
                activeTab = tab;
                break;
            }
        }
        return activeTab;
    }
}
