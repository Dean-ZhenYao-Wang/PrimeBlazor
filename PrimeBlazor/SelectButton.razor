@typeparam TItem
<div class="@containerClass">
    @foreach (var option in options)
    {
        int i = options.IndexOf(option);
        <div @key="getOptionLabel(option)" aria-label="@getOptionLabel(option)"
             @onclick="async(e)=>await onOptionSelect(e, option, i)"
             @onkeydown="async(e)=>await keyDown(e,option,i)"
             @onkeydown:preventDefault="true"
             @onkeydown:stopPropagation="true"
             tabindex="@(isOptionDisabled(option) ? null : 0)" @onfocus="async(e)=>await onFocus(e,i)" @onblur="async(e)=>await onBlur(e)"
             class="p-button p-component p-button-text-only @(isSelected(option)?"p-highlight":null) @(isOptionDisabled(option)?"p-disabled":null) @(i==focusedIndex?"p-focus":null)">
            @if (OptionTemplate is not null)
            {
                @OptionTemplate(option)
            }
            else
            {
                <span class="p-button-text p-c">@getOptionLabel(option)</span>
            }
        </div>
    }
</div>

@code {
    [Parameter] public TItem? model { get; set; }
    [Parameter] public EventCallback<TItem> modelChanged { get; set; }
    [Parameter] public List<TItem>? models { get; set; }
    [Parameter] public EventCallback<List<TItem>> modelsChanged { get; set; }
    [Parameter] public List<TItem> options { get; set; } = new List<TItem>();
    [Parameter] public bool disabled { get; set; }
    [Parameter] public string? dataKey { get; set; }
    [Parameter] public string name { get; set; } = string.Empty;
    [Parameter] public bool multiple { get; set; }
    [Parameter] public string? optionLabel { get; set; }
    [Parameter] public string? optionValue { get; set; }
    [Parameter] public string? optionDisabled { get; set; }
    [Parameter] public RenderFragment<TItem>? OptionTemplate { get; set; }
    [Parameter] public EventCallback<FocusEventArgs> focus { get; set; }
    [Parameter] public EventCallback<FocusEventArgs> blur { get; set; }
    private int focusedIndex = -1;
    private string getOptionLabel(TItem option)
    {
        return (string)ObjectUtils.ResolveFieldData(option, this.optionLabel);
    }
    private object getOptionValue(TItem option)
    {
        return !string.IsNullOrWhiteSpace(this.optionValue) ? ObjectUtils.ResolveFieldData(option, this.optionValue) : option;
    }
    private bool isOptionDisabled(TItem option)
    {
        return !string.IsNullOrWhiteSpace(this.optionDisabled) ? (bool)ObjectUtils.ResolveFieldData(option, this.optionDisabled) : false;
    }
    private async Task onOptionSelect(EventArgs eventArgs, TItem option, int index)
    {
        if (this.disabled || this.isOptionDisabled(option))
        {
            return;
        }
        if (this.multiple)
            await this.onOptionSelectMultiple(option);
        else
            await this.onOptionSelectSingle(option);
    }
    private async Task onOptionSelectMultiple(TItem option)
    {
        bool selected = this.isSelected(option);
        object optionValue = this.getOptionValue(option);
        List<TItem>? newValue = new List<TItem>();

        if (selected)
        {
            newValue = this.models.Where(val => !ObjectUtils.Equals(val, optionValue, this.dataKey)).ToList();
        }
        else
        {
            if (this.models != null && this.models.Count() > 0)
            {
                newValue.AddRange(this.models);
            }
            newValue.Add((TItem)optionValue);
        }
        await modelsChanged.InvokeAsync(newValue);
    }
    private async Task onOptionSelectSingle(TItem option)
    {
        bool selected = this.isSelected(option);
        object optionValue = this.getOptionValue(option);
        TItem newValue = selected ? default(TItem) : (TItem)optionValue;
        await modelChanged.InvokeAsync(newValue);
    }
    private bool isSelected(TItem option)
    {
        bool selected = false;
        object optionValue = this.getOptionValue(option);
        if (this.multiple)
        {
            if (string.IsNullOrWhiteSpace(this.optionValue))
            {
                if (this.models is not null && this.models.Count > 0)
                {
                    foreach (var val in this.models)
                    {
                        bool tif = val.Equals(option);
                        if (tif)
                        {
                            selected = true;
                            break;
                        }
                    }
                }
            }
            else
            {
                if (this.models is not null && this.models.Count > 0)
                {
                    foreach (var model in this.models)
                    {
                        var type = model.GetType();
                        var properties = type.GetProperties();
                        foreach (var val in properties)
                        {
                            bool tif = ObjectUtils.Equals(val.GetValue(this.model), optionValue, this.dataKey);
                            if (tif)
                            {
                                selected = true;
                                break;
                            }
                        }
                        if (selected)
                            break;
                    }
                }
            }
        }
        else
        {
            selected = ObjectUtils.Equals(this.model, optionValue, this.dataKey);
        }
        return selected;
    }
    private async Task keyDown(KeyboardEventArgs eventArgs, TItem option, int index)
    {
        if (eventArgs.Key.Equals("Enter") || eventArgs.Key.Equals("Space"))
        {
            await this.onOptionSelect(eventArgs, option, index);
        }
    }
    private async Task onFocus(FocusEventArgs eventArgs, int index)
    {
        this.focusedIndex = index;
        await focus.InvokeAsync(eventArgs);
    }
    private async Task onBlur(FocusEventArgs eventArgs)
    {
        this.focusedIndex = -1;
        await blur.InvokeAsync(eventArgs);
    }
    private string containerClass
    {
        get
        {
            return "p-selectbutton p-buttonset p-component p-buttonset-" + (this.options.Count > 0 ? this.options.Count : 0);
        }
    }
}
