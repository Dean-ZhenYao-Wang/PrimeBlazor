<div class="p-paginator p-component p-unselectable-text @CssClass">
    @if (LeftTemplate is not null)
    {
        <div class="p-paginator-left-content">
            @LeftTemplate(currentState)
        </div>
    }
    @if (ChildContent is not null)
    {
        @ChildContent
    }
    else
    {
        foreach (var item in templateItems)
        {
            if (item.Equals("FirstPageLink"))
            {
                <FirstPageLink @key="item" onclick="changePageToFirst" disabled="isFirstPage" />
            }
            else if (item.Equals("PrevPageLink"))
            {
                <PrevPageLink @key="item" onclick="changePageToPrev" disabled="isFirstPage" />
            }
            else if (item.Equals("NextPageLink"))
            {
                <NextPageLink @key="item" onclick="changePageToNext" disabled="isLastPage" />
            }
            else if (item.Equals("LastPageLink"))
            {
                <LastPageLink @key="item" onclick="changePageToLast" disabled="isLastPage" />
            }
            else if (item.Equals("PageLinks"))
            {
                <PageLinks @key="item" value="pageLinks" page="page" onclick="changePageLink" />
            }
            else if (item.Equals("CurrentPageReport"))
            {
                <CurrentPageReport @key="item" template="currentPageReportTemplate" page="page" pageCount="pageCount" />
            }
            else if (item.Equals("RowsPerPageDropdown") && rowsPerPageOptions.Count > 0)
            {
                <RowsPerPageDropdown @key="item" rows="new RowsPerPageDropdown.option(){label=d_rows.ToString(),value=d_rows}" value="rows" options="rowsPerPageOptions" rowsChanged="onRowChange" />
            }
        }
    }
    @if (RightTemplate is not null)
    {
        <div class="p-paginator-right-content">
            @RightTemplate(currentState)
        </div>
    }
</div>
@code {
    private PageState currentState
    {
        get
        {
            return new PageState()
                {
                    page = this.page,
                    first = this.d_first,
                    rows = this.d_rows
                };
        }
    }
    [Parameter] public string? CssClass { get; set; } = null;
    [Parameter] public RenderFragment<PageState>? LeftTemplate { get; set; }
    [Parameter] public RenderFragment<PageState>? RightTemplate { get; set; }
    [Parameter] public int totalRecords { get; set; } = 0;
    [Parameter] public int rows { get; set; } = 0;
    [Parameter] public EventCallback<int> rowsChanged { get; set; }
    [Parameter] public int first { get; set; } = 0;
    [Parameter] public EventCallback<int> firstChanged { get; set; }
    [Parameter] public int pageLinkSize { get; set; } = 5;
    [Parameter] public List<RowsPerPageDropdown.option> rowsPerPageOptions { get; set; } = new List<RowsPerPageDropdown.option>();
    [Parameter] public string template { get; set; } = "FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown";
    [Parameter] public string currentPageReportTemplate { get; set; } = "({currentPage} of {totalPages})";
    [Parameter] public EventCallback<PageState> pageChange { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    private int d_first;
    private int d_rows;
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            d_first = first;
            d_rows = rows;
        }
        else
        {
            if (d_first != first)
                d_first = first;
            if (d_rows != rows)
                d_rows = rows;
        }
    }
    private List<string> templateItems
    {
        get
        {
            List<string> keys = new List<string>();
            this.template.Split(" ").ToList().ForEach(m =>
            {
                keys.Add(m.Trim());
            });
            return keys;
        }
    }
    private int page
    {
        get
        {
            return (int)(Math.Floor((double)this.d_first / this.d_rows));
        }
    }
    private int pageCount
    {
        get
        {
            int count = (int)Math.Ceiling((double)this.totalRecords / this.d_rows);
            return count == 0 ? 1 : count;
        }
    }
    private bool isFirstPage
    {
        get
        {
            return this.page == 0;
        }
    }
    private bool isLastPage
    {
        get
        {
            return this.page == this.pageCount - 1;
        }
    }
    private int[] calculatePageLinkBoundaries
    {
        get
        {
            var numberOfPages = this.pageCount;
            var visiblePages = Math.Min(this.pageLinkSize, numberOfPages);

            //calculate range, keep current in middle if necessary
            var start = Math.Max(0, (int)Math.Ceiling((double)this.page - ((visiblePages) / 2)));
            var end = Math.Min(numberOfPages - 1, start + visiblePages - 1);

            //check when approaching to last page
            var delta = this.pageLinkSize - (end - start + 1);
            start = Math.Max(0, start - delta);

            return new int[] { start, end };
        }
    }

    private List<int> pageLinks
    {
        get
        {
            var page_Links = new List<int>();
            var boundaries = this.calculatePageLinkBoundaries;
            var start = boundaries[0];
            var end = boundaries[1];

            for (var i = start; i <= end; i++)
            {
                page_Links.Add(i + 1);
            }

            return page_Links;
        }
    }
    private async Task changePage(int p)
    {
        int pc = this.pageCount;
        if (p > 0 && p < pc)
        {
            this.d_first = this.d_rows * p;
            PageState state = new PageState()
                {
                    page = p,
                    first = this.d_first,
                    rows = this.d_rows,
                    pageCount = pc
                };
            await firstChanged.InvokeAsync(this.d_first);
            await rowsChanged.InvokeAsync(this.d_rows);
            await pageChange.InvokeAsync(state);
        }
    }
    private async Task changePageToFirst(MouseEventArgs mouseEvent)
    {
        if (!this.isFirstPage)
            await this.changePage(0);
    }
    private async Task changePageToPrev(MouseEventArgs mouseEvent)
    {
        await this.changePage(this.page - 1);
    }
    private async Task changePageLink(int value)
    {
        await this.changePage(value - 1);
    }
    private async Task changePageToNext(MouseEventArgs mouseEvent)
    {
        await this.changePage(this.page + 1);
    }
    private async Task changePageToLast(MouseEventArgs mouseEvent)
    {
        if (!this.isLastPage)
            await this.changePage(this.pageCount - 1);
    }
    private async Task onRowChange(int value)
    {
        this.d_rows = value;
        await this.changePage(this.page);
    }
}