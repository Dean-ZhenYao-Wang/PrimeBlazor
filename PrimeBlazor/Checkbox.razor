@typeparam TItem
@inject IJSRuntime JS
<div class="p-checkbox p-component" @onclick="onClick">
    <div class="p-hidden-accessible">
        <input @ref="inputElement" id="@inputId" type="checkbox" name="@name" checked="@isChecked" disabled="@disabled" @onfocus="async(e)=>await onFocus(e)" @onblur="async(e)=>await onBlur(e)"
               autocomplete="@autocomplete" autofocus="@autofocus">
    </div>
    <div ref="box" class="p-checkbox-box p-component @(isChecked?"p-highlight":null) @(disabled?"p-disabled":null) @(focused?"p-focus":null)">
        <span class="p-checkbox-icon p-c @(isChecked?"pi pi-check":null)"></span>
    </div>
</div>

@code {
    [Parameter] public TItem value { get; set; }
    [Parameter] public ICollection<TItem> model { get; set; } = new List<TItem>();
    [Parameter] public EventCallback<ICollection<TItem>> modelChanged { get; set; }
    [Parameter] public string name { get; set; } = string.Empty;
    [Parameter] public string inputId { get; set; } = Guid.NewGuid().ToString();
    [Parameter] public bool autofocus { get; set; }
    [Parameter] public string autocomplete { get; set; } = string.Empty;
    [Parameter] public bool disabled { get; set; }
    [Parameter] public EventCallback<TItem?> valueChanged { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> click { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> change{ get; set; }
    [Parameter] public EventCallback<FocusEventArgs> focus{ get; set; }
    [Parameter] public EventCallback<FocusEventArgs> blur{ get; set; }
    private bool focused = false;
    private bool isChecked
    {
        get
        {
            return this.model != null && this.model.Contains(this.value);
        }
    }
    private ElementReference inputElement;
    private async Task onClick(MouseEventArgs mouseEvent)
    {
        if (!this.disabled)
        {
            List<TItem> newModelValue;
            if (this.isChecked)
                newModelValue = this.model.Where(val => !this.value.Equals(val)).ToList();
            else
                newModelValue = this.model != null && this.model.Count() > 0 ? this.model.Append(this.value).ToList() :new List<TItem>(){this.value};

            await click.InvokeAsync(mouseEvent);
            await valueChanged.InvokeAsync(newModelValue[0]);
            await modelChanged.InvokeAsync(newModelValue);
            await change.InvokeAsync(mouseEvent);
            await JS.InvokeVoidAsync("DomHandler.elementFocus", inputElement);
        }
    }
    private async Task onFocus(FocusEventArgs focusEventArgs)
    {
        this.focused = true;
        await focus.InvokeAsync(focusEventArgs);
    }
    private async Task onBlur(FocusEventArgs focusEventArgs)
    {
        this.focused = false;
        await blur.InvokeAsync(focusEventArgs);
    }
}
