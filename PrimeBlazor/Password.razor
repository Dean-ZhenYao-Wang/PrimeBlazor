@implements IAsyncDisposable
@inject IJSRuntime JS
<input @ref="inputElement" type="password" class="p-inputtext p-component @(filled?"p-filled":null)" value="@model" 
    @oninput="async(e)=>await modelChanged.InvokeAsync(e.Value?.ToString())"
    @onfocus="async(e)=>await onFocus(e)"
    @onblur="async(e)=>await onBlur(e)"
    @onkeyup="async(e)=>await onKeyUp(e)"/>

@code {
    [Parameter] public string? model { get; set; }
    [Parameter]public EventCallback<string> modelChanged{ get; set; }
    [Parameter] public string promptLabel { get; set; } = "Enter a password";
    [Parameter] public string weakLabel { get; set; } = "Weak";
    [Parameter] public string mediumLabel { get; set; } = "Medium";
    [Parameter] public string strongLabel { get; set; } = "Strong";
    [Parameter] public bool feedback { get; set; } = true;
    [Parameter] public EventCallback<FocusEventArgs> focus{ get; set; }
    [Parameter] public EventCallback<FocusEventArgs> blur{ get; set; }
    [Parameter] public EventCallback<KeyboardEventArgs>keyup{ get; set; }
    private ElementReference inputElement;
    private IJSObjectReference? panelElement=null;
    private IJSObjectReference? meterElement=null;
    private IJSObjectReference? infoElement=null;
    private bool filled
    {
        get
        {
            return !string.IsNullOrWhiteSpace(this.model);
        }
    }
    private double normalize(double x, double y)
    {
        double diff = x - y;

        if (diff <= 0)
            return x / y;
        else
            return 1 + 0.5 * (x / (x + y / 4));
    }
    private double testStrength(string str)
    {
        double grade = 0;
        string val;

        val = Regex.Match(str,"[0-9]").Value;
        grade += this.normalize(!string.IsNullOrWhiteSpace(val) ? val.Length : 1 / 4, 1) * 25;

        val = Regex.Match(str,"[a-zA-Z]").Value;
        grade += this.normalize(!string.IsNullOrWhiteSpace(val)  ? val.Length : 1 / 2, 3) * 10;

        val = Regex.Match(str,"[!@#$%^&*?_~.,;=]").Value;
        grade += this.normalize(!string.IsNullOrWhiteSpace(val)  ? val.Length : 1 / 6, 1) * 35;

        val = Regex.Match(str,"[A-Z]").Value;
        grade += this.normalize(!string.IsNullOrWhiteSpace(val)  ? val.Length : 1 / 6, 1) * 30;

        grade *= str.Length / 8;

        return grade > 100 ? 100 : grade;
    }

    private IJSObjectReference module;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import",
              "./_content/PrimeBlazor/Password.razor.js");
        }
    }
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
    private async Task onFocus(FocusEventArgs eventArgs)
    {
        if (feedback)
        {
            if(this.panelElement == null)
            {
                meterElement = await JS.InvokeAsync<IJSObjectReference>("Password.createMeter");
                infoElement = await JS.InvokeAsync<IJSObjectReference>("Password.createInfo", this.promptLabel);
                panelElement = await JS.InvokeAsync<IJSObjectReference>("Password.createPanel", this.inputElement, this.meterElement, this.infoElement);
            }
            await JS.InvokeVoidAsync("Password.focus", inputElement, panelElement);
        }
        await focus.InvokeAsync(eventArgs);
    }
    private async Task onBlur(FocusEventArgs eventArgs)
    {
        if(this.panelElement is not null)
        {
            await JS.InvokeVoidAsync("Password.blur", panelElement);
        }
        await blur.InvokeAsync(eventArgs);
    }
    private async Task onKeyUp(KeyboardEventArgs eventArgs)
    {
        if(this.panelElement is not null)
        {
            string value = this.model;
            string label = string.Empty; ;
            string meterPos = string.Empty; ;
            if (string.IsNullOrWhiteSpace(value))
            {
                label = this.promptLabel;
                meterPos = "0px 0px";
            }
            else
            {
                double score = this.testStrength(value);
                if (score < 30)
                {
                    label = this.weakLabel;
                    meterPos = "0px -10px";
                }else if (score >= 30 && score < 80)
                {
                    label = this.mediumLabel;
                    meterPos = "0px -20px";
                }else if (score >= 80)
                {
                    label = this.strongLabel;
                    meterPos = "0px -30px";
                }
            }
            await JS.InvokeVoidAsync("Password.keyup", meterElement, meterPos, infoElement, label);
        }
        await keyup.InvokeAsync(eventArgs);
    }
}
