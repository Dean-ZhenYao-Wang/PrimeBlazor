@typeparam TItem
@implements IAsyncDisposable
@inject IJSRuntime JS
<div class="@containerClass" @onclick="onClick">
    <div class="p-hidden-accessible">
        <input @ref="focusInput" type="text" role="listbox" readonly disabled="@disabled" @onfocus="onFocus" @onblur="onBlur" @onkeydown="async(e)=>await onKeyDown(e)" tabindex="@tabindex" />
    </div>
    <div class="p-multiselect-label-container">
        <label class="@labelClass">
            @if(valueTemplate is not null)
            {
                @valueTemplate(this.model)
            }
            else
            {
                @label
            }
        </label>
    </div>
    <div class="p-multiselect-trigger">
        <span class="p-multiselect-trigger-icon pi pi-chevron-down p-c"></span>
    </div>
    <transition name="p-input-overlay" @ondragenter="async()=>await onOverlayEnter()" @ondragleave="async()=>await onOverlayLeave()">
        @if (overlayVisible)
        {
            <div @ref="overlay" class="p-multiselect-panel">
                <div class="p-multiselect-header">
                    <div class="p-checkbox p-component" @onclick="async(e)=>await onToggleAll(e)">
                        <div class="p-hidden-accessible">
                            <input type="checkbox" readonly>
                        </div>
                        <div class="p-checkbox-box p-component @(allSelected?"'p-highlight":null)">
                            <span class="p-checkbox-icon p-c @(allSelected?"pi pi-check":null)"></span>
                        </div>
                    </div>
                    <div class="p-multiselect-filter-container">
                        <input type="text" @bind-value="filterValue" class="p-multiselect-filter p-component p-inputtext p-component" placeholder="filterPlaceholder">
                        <span class="p-multiselect-filter-icon pi pi-search"></span>
                    </div>
                    <button class="p-multiselect-close p-link" @onclick="onCloseClick">
                        <span class="p-multiselect-close-icon pi pi-times" />
                    </button>
                </div>
                <div @ref="itemsWrapper" class="p-multiselect-items-wrapper" style="@(string.IsNullOrWhiteSpace(scrollHeight)?"max-height":null)">
                    <ul class="p-multiselect-items p-multiselect-list p-component">
                        @foreach(var option in visibleOptions)
                        {
                            int i = visibleOptions.IndexOf(option);
                            <li class="p-multiselect-item @(async()=>await isSelected(option)?"p-highlight":null) @(isOptionDisabled(option)?"p-disabled":null)"
                                aria-label="@getOptionLabel(option)" @key="getOptionLabel(option)" @onclick="async(e)=>await onOptionSelect(e, option)" @onkeydown="async(e)=>await onOptionKeyDown(e, option)" tabindex="@(tabindex)">
                                <div class="p-checkbox p-component">
                                    <div class="p-checkbox-box p-component @(async()=>await isSelected(option)?"p-highlight":null)">
                                        <span class="p-checkbox-icon p-c @(async()=>await isSelected(option)?"pi pi-check":null)"></span>
                                    </div>
                                </div>
                                @if(optionTemplate is not null)
                                {
                                    @optionTemplate(option)
                                }
                                else
                                {
                                    <div name="option" index="@i">
                                       <span>@getOptionLabel(option)</span>
                                    </div>
                                }
                            </li>
                        }
                    </ul>
                </div>
            </div>            
        }
     </transition>
</div>

@code {
    private ElementReference itemsWrapper;
    private ElementReference focusInput;
    [Parameter] public List<TItem> model { get; set; } = new List<TItem>();
    [Parameter] public EventCallback<List<TItem>> modelChanged { get; set; }
    [Parameter] public List<TItem> options { get; set; } = new List<TItem>();
    [Parameter] public string? dataKey { get; set; } = null;
    [Parameter] public bool filter { get; set; }
    [Parameter] public string? optionLabel { get; set; } = null;
    [Parameter] public string? optionValue { get; set; } = null;
    [Parameter] public string? optionDisabled { get; set; } = null;
    [Parameter] public bool disabled { get; set; }
    [Parameter] public int tabindex { get; set; }
    [Parameter] public bool editable { get; set; }
    [Parameter] public string? placeholder { get; set; }
    [Parameter] public string scrollHeight { get; set; } = "200px";
    [Parameter] public string? filterPlaceholder { get; set; }
    [Parameter] public EventCallback<List<TItem>> change{ get; set; }
    [Parameter] public RenderFragment<List<TItem>>? valueTemplate{ get; set; }
    [Parameter] public RenderFragment<TItem>? optionTemplate{ get; set; }
    private bool focused = false;
    private string? filterValue = null;
    public bool overlayVisible = false;
    private IJSObjectReference module;
    private DotNetObjectReference<MultiSelect<TItem>> dotNetHelper;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./_content/PrimeBlazor/MultiSelect.razor.js");
        }
        else
        {
            if (this.overlayVisible && !string.IsNullOrWhiteSpace(this.filterValue))
            {
                await this.alignOverlay();
            }
        }
    }
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
            await module.DisposeAsync();
        await this.unbindOutsideClickListener();
        dotNetHelper?.Dispose();
    }
    private string getOptionLabel(TItem option)
    {
        return ObjectUtils.ResolveFieldData(option, this.optionLabel).ToString();
    }
    private object getOptionValue(TItem option)
    {
        if( !string.IsNullOrWhiteSpace(this.optionValue)){
            return ObjectUtils.ResolveFieldData(option, this.optionValue);
        }
        else
        {
            return option;            
        }
    }
    private ElementReference container;
    private bool isOptionDisabled(TItem option)
    {
        return !string.IsNullOrWhiteSpace(this.optionDisabled) ? (bool)ObjectUtils.ResolveFieldData(option, this.optionDisabled) : false;
    }
    private async Task<bool> isSelected(TItem option)
    {
        bool selected = false;
        TItem optionValue =(TItem)this.getOptionValue(option);

        if (this.model!=null&&this.model.Count > 0)
        {
            foreach(var val in this.model)
            {
                if(await JS.InvokeAsync<bool>("ObjectUtils.equals", val, optionValue, this.dataKey))
                {
                    selected = true;
                    break;
                }
            }
        }
        return selected;
    }
    private void onFocus()
    {
        this.focused = true;
    }
    private void onBlur()
    {
        this.focused = false;
    }
    private async Task onClick(EventArgs eventArgs)
    {
        if(await JS.InvokeAsync<bool>("DomHandler.elementContainsTargetElement", overlay, eventArgs))
        {
            this.overlayVisible = !this.overlayVisible;
            await focusInput.FocusAsync();
        }
    }
    private void onCloseClick() 
    {
        this.overlayVisible = false;
    }
    private async Task onKeyDown(KeyboardEventArgs eventArgs)
    {
        switch (eventArgs.Key)
        {
            case "ArrowDw":
                if (this.visibleOptions.Count > 0 && !this.overlayVisible && eventArgs.AltKey)
                {
                    this.overlayVisible = true;
                }
                break;
            case "":
                if (!this.overlayVisible)
                {
                    this.overlayVisible = true;
                }
                break;
            case "Enter":
            case "Escape":
                if (this.overlayVisible)
                {
                    this.overlayVisible = false;
                }
                break;
            case "Tab":
                this.overlayVisible = false;
                break;
        }
    }
    private async Task onToggleAll(MouseEventArgs eventArgs)
    {
        List<TItem> value = this.allSelected ? new List<TItem>() : this.visibleOptions;
        await modelChanged.InvokeAsync(value);
        await change.InvokeAsync(value);
    }
    private async Task<IJSObjectReference?> findNextItem(IJSObjectReference? item)
    {
        IJSObjectReference? nextItem = await JS.InvokeAsync<IJSObjectReference>("nextElementSibling", item);

        if (nextItem!=null)
            return await JS.InvokeAsync<bool>("DomHandler.hasClass",nextItem, "p-disabled") ?await this.findNextItem(nextItem) : nextItem;
        else
            return null;
    }
    private async Task<IJSObjectReference?> findPrevItem(IJSObjectReference? item)
    {
        IJSObjectReference? prevItem = await JS.InvokeAsync<IJSObjectReference>("nextElementSibling", item);

        if (prevItem!=null)
            return await JS.InvokeAsync<bool>("DomHandler.hasClass",prevItem, "p-disabled") ?await this.findPrevItem(prevItem) : prevItem;
        else
            return null;
    }
    private async Task onOverlayEnter() {
        await this.alignOverlay();
        await this.bindOutsideClickListener();
    }
    private async Task onOverlayLeave() {
        await this.unbindOutsideClickListener();
    }
    private async Task alignOverlay() {
        await JS.InvokeVoidAsync("DomHandler.relativePosition",overlay,container);
    }
    private async Task onOptionSelect(EventArgs eventArgs,TItem option)
    {
        if (this.disabled || this.isOptionDisabled(option))
        {
            return;
        }
        bool selected = false; //this.isSelected(option);
        bool valueChanged = false;
        List<TItem> value = new List<TItem>();
        if(selected)
        {
            foreach(var val in this.model)
            {
                if(!await JS.InvokeAsync<bool>("ObjectUtils.equals", val, this.getOptionValue(option), this.dataKey))
                {
                    value.Add(val);
                }
                else
                {
                    if (this.model!=null&&this.model.Count > 0)
                    {
                        value.AddRange(this.model);
                    }
                    value.Add((TItem)this.getOptionValue(option));
                }
                await modelChanged.InvokeAsync(value);
                await change.InvokeAsync(value);
            }
        }
    }
    private async Task onOptionKeyDown(KeyboardEventArgs eventArgs,TItem option) 
    {

        IJSObjectReference listItem = await JS.InvokeAsync<IJSObjectReference>("DomHandler",eventArgs);
        switch (eventArgs.Key)
        {
            case "ArrowDw":
                IJSObjectReference? nextItem =await this.findNextItem(listItem);
                if (nextItem != null)
                {
                    await nextItem.InvokeVoidAsync("focus");
                }
                break;
            case "ArrowUp":
                IJSObjectReference? prevItem =await this.findPrevItem(listItem);
                if (prevItem != null)
                {
                    await prevItem.InvokeVoidAsync("focus");
                }
                break;
            case "Enter":
                await this.onOptionSelect(eventArgs, option);
                break;
        }
    }
    private string Id = Guid.NewGuid().ToString();
    private ElementReference overlay;
    private async Task bindOutsideClickListener()
    {
        await module.InvokeVoidAsync("bindOutsideClickListener", Id, overlay, dotNetHelper);
    }
    private async Task unbindOutsideClickListener()
    {
        await module.InvokeVoidAsync("unbindOutsideClickListener", Id);
    }
    [JSInvokable]
    public async Task setOverlayVisible(bool val)
    {
        this.overlayVisible = val;
    }
    private string? getLabelByValue(TItem val)
    {
        string? label = null;
        if (this.options.Count > 0)
        {
            foreach(var option in this.options)
            {
                TItem optionValue = (TItem)this.getOptionValue(option);
                if (ObjectUtils.Equals(optionValue, val, this.dataKey))
                {
                    label = this.getOptionLabel(option);
                    break;
                }
            }
        }
        return label;
    }
    private List<TItem> visibleOptions
    {
        get
        {
            if (!string.IsNullOrWhiteSpace(this.filterValue)&&this.filterValue.Trim().Length>0)
                return this.options.Where(m => this.getOptionLabel(m).ToLower().IndexOf(this.filterValue.ToLower()) > -1).ToList();
            else
                return this.options;
        }
    }
    private bool allSelected
    {
        get
        {
            if (!string.IsNullOrWhiteSpace(this.filterValue) && this.filterValue.Trim().Length > 0)
                return this.model != null && this.model.Count > 0 && this.visibleOptions != null && this.model.Count == this.visibleOptions.Count;
            else
                return this.model != null && this.options != null && this.model.Count > 0 && this.model.Count == this.options.Count;
        }
    }
    private string containerClass
    {
        get
        {
            string container_class = "p-multiselect p-component p-unselectable-text";
            if (this.disabled)
                container_class += " p-disabled";
            if (this.focused)
                container_class += " p-focus";
            return container_class;
        }
    }
    private string labelClass
    {
        get
        {
            string label = string.Empty;
            if (this.model!=null&&this.model.Count > 0)
            {
                label = "";
                for(int i = 0; i < this.model.Count; i++)
                {
                    if (i != 0)
                    {
                        label += ",";
                    }
                    label += this.getLabelByValue(this.model[i]);
                }
            }
            else
            {
                if (!string.IsNullOrWhiteSpace(this.placeholder))
                    label = this.placeholder;
                else
                    label = "p-multiselect";
            }
            return label;
        }
    }
    private string label 
    {
        get { 
            string label_str="";

            if (this.model!=null&&this.model.Count>0) {
                for (int i = 0; i < this.model.Count; i++) {
                    if (i != 0) {
                        label_str += ",";
                    }
                    label_str += this.getLabelByValue(this.model[i]);
                }
            }
            else {
                if (!string.IsNullOrWhiteSpace(this.placeholder))
                    label_str = this.placeholder;
                else
                    label_str = "p-multiselect";
            }
            return label_str;
        } 
    }
}
