@implements IAsyncDisposable
@inject IJSRuntime JS
<transition id="@Id" @ref=overlayPanel name="p-overlaypanel" @onmouseenter="async()=> await onEnter()" @onmouseleave="async()=> await onLeave()">
    @if (visible)
    {
        <div class="p-overlaypanel p-component" @ref="container">
            <div class="p-overlaypanel-content">
                @ChildContent
            </div>
            @if (showCloseIcon)
            {
                <button class="p-overlaypanel-close p-link" @onclick="hide">
                    <span class="p-overlaypanel-close-icon pi pi-times"></span>
                </button>
            }
        </div>
    }
</transition>
@code {
    [Parameter] public string appendTo { get; set; }
    [Parameter] public bool showCloseIcon { get; set; } = false;
    [Parameter] public bool dismissable { get; set; } = true;
    [Parameter] public int baseZIndex { get; set; } = 0;
    [Parameter] public bool autoZIndex { get; set; } = true;
    [Parameter] public RenderFragment? ChildContent { get; set; }
    private bool visible = false;
    [Parameter] public string Id { get; set; } = Guid.NewGuid().ToString();
    private ElementReference overlayPanel;
    private ElementReference container;
    private DotNetObjectReference<OverlayPanel>? dotNetHelper;
    private IJSObjectReference module;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./_content/PrimeBlazor/OverlayPanel.razor.js");
            await JS.InvokeVoidAsync("assignDotNetHelper", overlayPanel, dotNetHelper);
        }
    }
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        await this.beforeDestory();
        dotNetHelper?.Dispose();
    }
    public async Task toggle(ElementReference? target)
    {
        await JS.InvokeVoidAsync("OverlayPanel.toggle", target, this.Id);
    }
    [JSInvokable]
    public bool getVisible()
    {
        return this.visible;
    }
    [JSInvokable]
    public void hide()
    {
        this.visible = false;
    }
    [JSInvokable]
    public void show()
    {
        this.visible = true;
    }
    private async Task onEnter()
    {
        await JS.InvokeVoidAsync("OverlayPanel.onEnter", this.Id,this.appendTo, this.container, this.baseZIndex);
    }
    private async Task onLeave()
    {
        await JS.InvokeVoidAsync("OverlayPanel.onLeave", this.Id);
    }
    private async Task beforeDestory()
    {
        await JS.InvokeVoidAsync("OverlayPanel.beforeDestroy", this.Id, this.appendTo, this.container, this.dismissable);
    }
}