@typeparam TItem where TItem : Menu
@implements IAsyncDisposable
@inject IJSRuntime JS
<div @ref="container" class="p-splitbutton p-buttonset p-component @CssClass" id="@Id">
    <Button icon="icon" label="label" onclick="onClickEvent" disabled="disabled" tabindex="tabindex" />
    <Button CssClass="p-splitbutton-menubutton" icon="pi pi-caret-down" onclick="onDropdownButtonClick" disabled="disabled" />
    <transition name="p-input-overlay" @onmouseenter="onOverlayEnter" @onmouseleave="onOverlayLeave">
        @if (overlayVisible)
        {
            <div @ref="overlay" class="p-menu p-menu-dynamic p-component">
                <ul class="p-menu-list p-reset">
                    @foreach (TItem item in model)
                    {
                        <li class="p-menuitem @(item.CssClass)" role="menuitem" @key="item.label" target="@item.target" style="@item.style">
                            <a href="@(item.url??"#")" class="p-menuitem-link" @onclick="(e)=>itemClick(e, item)" @onclick:preventDefault="true">
                                <span class="@(item.icon)"></span>
                                <span class="p-menuitem-text">@item.label</span>
                            </a>
                        </li>
                    }
                </ul>
            </div>
        }
    </transition>
</div>
@code {
    [Parameter] public string? CssClass { get; set; }
    [Parameter] public string Id { get; set; } = Guid.NewGuid().ToString();
    [Parameter] public string? label { get; set; } = null;
    [Parameter] public string? icon { get; set; } = null;
    [Parameter] public bool disabled { get; set; } = false;
    [Parameter] public int? tabindex { get; set; } = null;
    [Parameter] public bool autoZIndex { get; set; } = true;
    [Parameter] public int baseZIndex { get; set; } = 0;
    [Parameter] public List<TItem> model { get; set; } = new List<TItem>();
    private bool overlayVisible = false;
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        await this.unbindOutsideClickListener();
        await module.DisposeAsync();
        dotNetHelper.Dispose();
    }
    [Parameter] public EventCallback<MouseEventArgs> onclick { get; set; }
    private async Task onClickEvent(MouseEventArgs eventArgs)
    {
        await onclick.InvokeAsync(eventArgs);
        this.overlayVisible = false;
    }
    private void onDropdownButtonClick()
    {
        this.overlayVisible = !this.overlayVisible;
    }
    private void itemClick(MouseEventArgs eventArgs, TItem item)
    {
        if (item.command != null)
        {
            item.command.Invoke(new CommandEventArgs() { EventArgs = eventArgs, Menu = item });
        }
        this.overlayVisible = false;
    }
    private async Task onOverlayEnter()
    {
        if (this.autoZIndex)
        {
            await JS.InvokeVoidAsync("DomHandler.setElementZIndex", this.overlay, (this.baseZIndex + await JS.InvokeAsync<int>("DomHandler.generateZIndex")));
        }
        this.alignOverlay();
        await this.bindOutsideClickListener();
    }
    private async Task onOverlayLeave()
    {
        await this.unbindOutsideClickListener();
    }
    private ElementReference overlay;
    private ElementReference container;
    private async void alignOverlay()
    {
        await JS.InvokeVoidAsync("DomHandler.relativePosition", this.overlay, this.container);
    }
    private IJSObjectReference module;
    private DotNetObjectReference<SplitButton<TItem>> dotNetHelper;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./_content/PrimeBlazor/SplitButton.razor.js");
        }
    }
    private async Task bindOutsideClickListener()
    {
        await JS.InvokeVoidAsync("SplitButton.bindOutsideClickListener", dotNetHelper, this.Id, this.overlayVisible, this.overlay, this.container);
    }
    private async Task unbindOutsideClickListener()
    {
        await JS.InvokeVoidAsync("SplitButton.unbindOutsideClickListener", this.Id);
    }
    [JSInvokable]
    public void setOverlayVisible(bool visible)
    {
        this.overlayVisible = visible;
    }
}