<div class="p-panel p-component" style="@style">
    <div class="p-panel-titlebar">
        @if (Headertemplate is not null)
        {
            @Headertemplate
        }
        else
        {
            <span class="p-panel-title" v-if="header">@header</span>
        }
        @if (toggleable)
        {
            <a tabindex="0" class="p-panel-titlebar-icon p-panel-titlebar-toggler" @onclick="toggleEvent" @onkeydown="toggleKeyDown">
                <span class="@(!d_collapsed?"pi pi-minus":"pi pi-plus")"></span>
            </a>
        }
    </div>
    <transition name="p-panel-content-wrapper">
        <div class="p-panel-content-wrapper" style="display:@(!d_collapsed?"block":"none")">
            <div class="p-panel-content">
                @ChildContent
            </div>
        </div>
    </transition>
</div>

@code {
    [Parameter] public string header { get; set; } = string.Empty;
    [Parameter] public bool toggleable { get; set; }
    [Parameter] public bool collapsed { get; set; }
    [Parameter] public EventCallback<bool> collapsedChanged { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? Headertemplate { get; set; }
    [Parameter] public string? style { get; set; } = null;
    [Parameter] public EventCallback<bool> toggle { get; set; }
    private bool d_collapsed;
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            d_collapsed = collapsed;
        }
        else
        {
            if (d_collapsed != collapsed)
                d_collapsed = collapsed;
        }
    }
    private async void toggleEvent()
    {
        this.d_collapsed = !this.d_collapsed;
        await collapsedChanged.InvokeAsync(this.d_collapsed);
        await toggle.InvokeAsync(this.d_collapsed);
    }
    private void toggleKeyDown(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key.Equals("Enter"))
        {
            this.toggleEvent();
        }
    }
}
