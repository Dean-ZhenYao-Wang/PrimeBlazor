@typeparam TItem
@using System.Diagnostics.CodeAnalysis
@implements IAsyncDisposable
@inject IJSRuntime JS
<div class="p-listbox p-inputtext p-component">
    @if (filter)
    {        
        <div class="p-listbox-header">
            <div class="p-listbox-filter-container">
                <input type="text" role="textbox" class="p-inputtext p-component" @bind="filterValue">
                <span class="p-listbox-filter-icon pi pi-search"></span>
            </div>
        </div>
    }
    <div class="p-listbox-list-wrapper" style="@(style);@listStyle">
        <ul class="p-listbox-list">
            @for(int index=0;index<visibleOptions.Count;index++)
            {
                var option = visibleOptions[index];
                <li tabindex="@(isOptionDisabled(option)?null:"0")" class="'p-listbox-item @(isSelected(option) ?"p-highlight":null) @(isOptionDisabled(option)?"p-disabled":null)"
                    area-label="@getOptionLabel(option)"
                    @key="@(getOptionLabel(option))" @onclick="async(e)=>await onOptionSelect(e, option)" @ontouchend="onOptionTouchEnd"
                    @onkeydown="@((e)=>onOptionKeyDown(e,option))" @onkeydown:stopPropagation>
                    @if (template is not null)
                    {
                        @template(option)                        
                    }
                    else
                    {
                        @getOptionLabel(option)
                    }
                </li>
            }
        </ul>
    </div>
</div>

@code {
    [Parameter] public TItem? value { get; set; }
    [Parameter] public EventCallback<TItem> valueChanged { get; set; }
    [Parameter] public List<TItem> options { get; set; } = new List<TItem>();
    [Parameter, AllowNull] public List<TItem> values { get; set; } = new List<TItem>();
    [Parameter] public EventCallback<List<TItem>> valuesChanged{ get; set; }
    [Parameter] public string? dataKey { get; set; } = null;
    [Parameter] public bool multiple { get; set; }
    [Parameter] public bool metaKeySelection { get; set; }
    [Parameter] public bool filter { get; set; }
    [Parameter] public string? optionLabel { get; set; } = null;
    [Parameter] public string? optionValue { get; set; } = null;
    [Parameter] public string? optionDisabled { get; set; } = null;
    [Parameter] public bool disabled{ get; set; }
    [Parameter] public string listStyle { get; set; } = string.Empty;
    [Parameter] public string style { get; set; } = string.Empty;
    [Parameter] public RenderFragment<TItem>? template { get; set; }
    private string label = string.Empty;
    private bool optionTouched = false;

    private string filterValue = string.Empty;

    private List<TItem> visibleOptions
    {
        get
        {
            if (!string.IsNullOrWhiteSpace(this.filterValue))
            {
                return this.options.Where(option => getOptionLabel(option).ToLower().Contains(this.filterValue.ToLower())).ToList();
            }
            else
            {
                return this.options;
            }
        }
    }

    private DotNetObjectReference<Listbox<TItem>>? dotNetHelper;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
        }
    }
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        dotNetHelper?.Dispose();
    }
    private string getOptionLabel(TItem option)
    {
        return ObjectUtils.ResolveFieldData(option, this.optionLabel).ToString();
    }
    private object getOptionValue(TItem option)
    {
        if( !string.IsNullOrWhiteSpace(this.optionValue)){
            return ObjectUtils.ResolveFieldData(option, this.optionValue);
        }
        else
        {
            return option;            
        }
    }
    private bool isOptionDisabled(TItem option)
    {
        return !string.IsNullOrWhiteSpace(this.optionDisabled) ? (bool)ObjectUtils.ResolveFieldData(option, this.optionDisabled) : false;
    }
    [JSInvokable]
    public async Task onOptionSelect(MouseEventArgs eventArgs,TItem option) {
        if (this.disabled||this.isOptionDisabled(option)) {
            return;
        }

        if(this.multiple)
            await this.onOptionSelectMultiple(eventArgs, option);
        else
            await this.onOptionSelectSingle(eventArgs, option);

        this.optionTouched = false;
    }
    private void  onOptionTouchEnd() {
        if (this.disabled) {
            return;
        }

        this.optionTouched = true;
    }
    private async Task onOptionSelectSingle(MouseEventArgs eventArgs,TItem option) {
        bool selected = this.isSelected(option);
        var valueChanged = false;
        TItem? value = default(TItem);
        var metaSelection = this.optionTouched ? false : this.metaKeySelection;

        if (metaSelection) {
            bool metaKey = (eventArgs.MetaKey || eventArgs.CtrlKey);

            if (selected) {
                if (metaKey) {
                    value = default(TItem);
                    valueChanged = true;
                }
            }
            else {
                value =(TItem)this.getOptionValue(option);
                valueChanged = true;
            }
        }
        else {
            value = selected ? default(TItem) :(TItem)this.getOptionValue(option);
            valueChanged = true;
        }

        if (valueChanged) {
            await this.updateModel(eventArgs, value);
        }
    }
    private async Task onOptionSelectMultiple(MouseEventArgs eventArgs,TItem option) {        
        bool selected = this.isSelected(option);
        bool valueChanged = false;
        List<TItem>? value = null;
        bool metaSelection = this.optionTouched ? false : this.metaKeySelection;

        if (metaSelection) {
            bool metaKey = (eventArgs.MetaKey || eventArgs.CtrlKey);

            if (selected) {
                if(metaKey)
                    value =this.removeOption(option);
                else
                    value = new List<TItem>() { (TItem)this.getOptionValue(option) };

                valueChanged = true;
            }
            else {
                if (metaKey)
                {
                    if (this.values == null || this.values.Count == 0)
                    {
                        value = new List<TItem>();
                    }
                    else
                    {
                        value = new List<TItem>();
                        value.AddRange(this.values);
                    }
                }
                else
                {
                    value = new List<TItem>();
                }
                value.Add((TItem)this.getOptionValue(option));
                valueChanged = true;
            }
        }
        else {
            if (selected)
                value =this.removeOption(option);
            else
            {
                if (this.values == null )
                {
                    value = new List<TItem>();
                }
                else
                {
                    value = this.values;
                }
                value.Add((TItem)this.getOptionValue(option));
            }


            valueChanged = true;
        }

        if(valueChanged) {
            await  this.updateModels(eventArgs, value);
        }
    }

    private bool isSelected(TItem option) {
        bool selected = false;
        TItem optionValue =(TItem)this.getOptionValue(option);

        if (this.multiple) {
            if (this.value!=null) {
                var type = this.value.GetType();
                var properties = type.GetProperties();
                foreach (var val in properties) {
                    bool tif = ObjectUtils.Equals(val.GetValue(this.value), optionValue, this.dataKey);
                    if (tif) {
                        selected = true;
                        break;
                    }
                }
            }
        }
        else {
            selected = ObjectUtils.Equals(this.value,optionValue,this.dataKey);
        }

        return selected;
    }
    private List<TItem> removeOption(TItem option) {
        List<TItem> returnValue = new List<TItem>();
        foreach(var val in this.values)
        {
            bool tif =  ObjectUtils.Equals(val, this.getOptionValue(option), this.dataKey);
            if (!tif)
            {
                returnValue.Add(val);
            }
        }
        return returnValue;
    }
    private async Task updateModel(MouseEventArgs eventArgs,TItem value) {
        await valueChanged.InvokeAsync(value);
    }
    private async Task updateModels(MouseEventArgs eventArgs,List<TItem> values) {
        await valuesChanged.InvokeAsync(values);
    }
    private async Task onOptionKeyDown(KeyboardEventArgs eventArgs,TItem option)
    {
        await JS.InvokeVoidAsync("ObjectUtils.optionKeyDown", dotNetHelper, eventArgs, option);
    }
}
