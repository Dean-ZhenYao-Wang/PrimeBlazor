@typeparam TItem
@inject IJSRuntime JS
<div class="p-datatable p-component">
    @ChildContent
    <div class="p-datatable-wrapper">
        <table>
            <thead class="p-datatable-thead">
                <tr>
                    @foreach (var col in columns)
                    {
                        <th @key="col.columnKey??col.field">
                            <span class="p-column-title" v-if="col.header">@col.header</span>
                        </th>
                    }
                </tr>
            </thead>
            <tbody class="p-datatable-tbody">
                @if (value is not null)
                    @foreach (var rowData in value)
                    {
                        int index = value.IndexOf(rowData);
                        <tr class="p-datatable-row" @key="getRowKey(rowData, index)">
                            @foreach (var col in columns)
                            {
                                <td @key="col.columnKey??col.field">
                                    @resolveFieldData(rowData, col.field)
                                </td>
                            }
                        </tr>
                    }
            </tbody>
        </table>
    </div>
</div>
@code {
    [Parameter] public List<TItem>? value { get; set; } = null;
    [Parameter] public string? dataKey { get; set; } = null;
    [Parameter] public RenderFragment? ChildContent { get; set; } = null;
    [Parameter] public List<Column> columns { get; set; } = new List<Column>();

    private async Task<int> getRowKey(TItem rowData, int index)
    {
        return !string.IsNullOrWhiteSpace(this.dataKey) ? await JS.InvokeAsync<int>("ObjectUtils.resolveFieldData", rowData, this.dataKey) : index;
    }
    private string resolveFieldData(TItem rowData, string field)
    {
        object? ob = ObjectUtils.ResolveFieldData(rowData, field);
        return ob == null ? string.Empty : ob.ToString();
    }
}