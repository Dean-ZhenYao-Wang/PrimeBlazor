@typeparam TItem
@inject IJSRuntime JS
<div :class="containerClass">
    @if (headerTemplate is not null)
    {
        <div class="p-dataview-header">
            @headerTemplate
        </div>
    }
    @if (paginatorTop)
    {
        <Paginator rows="rows" first="first" totalRecords="getTotalRecords" pageLinkSize="pageLinkSize" template="paginatorTemplate" rowsPerPageOptions="rowsPerPageOptions"
                   currentPageReportTemplate="currentPageReportTemplate" CssClass="@(paginatorTop?"p-paginator-top":null)" pageChange="onPage">
            @if (paginatorLeftTemplate is not null)
            {
                @paginatorLeftTemplate
            }
            @if (paginatorRightTemplate is not null)
            {
                @paginatorRightTemplate
            }
        </Paginator>
    }
    <div class="p-dataview-content">
        <div class="p-grid">
            @if (value is not null)
            {
                foreach (TItem item in items)
                {
                    if (listTemplate is not null && layout.Equals("list"))
                    {
                        @listTemplate(item)
                        ;
                    }
                    if (gridTemplate is not null && layout.Equals("grid"))
                    {
                        @gridTemplate(item)
                    }
                }
            }
            @if (isEmpty)
            {
                <div class="p-col-12">@emptyMessage</div>
            }
        </div>
    </div>
    @if (paginatorBottom)
    {
        <Paginator rows="rows" first="first" totalRecords="getTotalRecords" pageLinkSize="pageLinkSize" template="@paginatorTemplate" rowsPerPageOptions="rowsPerPageOptions"
                   currentPageReportTemplate="currentPageReportTemplate" CssClass="@(paginatorBottom?"p-paginator-bottom":null)" pageChange="onPage">
            @if (paginatorLeftTemplate is not null)
            {
                @paginatorLeftTemplate
            }
            @if (paginatorRightTemplate is not null)
            {
                @paginatorRightTemplate
            }
        </Paginator>
    }
    @if (footerTemplate is not null)
    {
        <div class="p-dataview-footer">
            @footerTemplate
        </div>
    }
</div>

@code {
    [Parameter] public List<TItem>? value { get; set; } = null;
    [Parameter] public string layout { get; set; } = "list";
    [Parameter] public int rows { get; set; } = 0;
    [Parameter] public EventCallback<int> rowsChanged { get; set; }
    [Parameter] public int first { get; set; } = 0;
    [Parameter] public EventCallback<int> firstChanged { get; set; }
    [Parameter] public int totalRecords { get; set; } = 0;
    [Parameter] public bool paginator { get; set; } = false;
    [Parameter] public string paginatorPosition { get; set; } = "bottom";
    [Parameter] public bool alwaysShowPaginator { get; set; } = true;
    [Parameter] public string paginatorTemplate { get; set; } = "FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown";
    [Parameter] public int pageLinkSize { get; set; } = 5;
    [Parameter] public List<RowsPerPageDropdown.option> rowsPerPageOptions { get; set; } = new List<RowsPerPageDropdown.option>();
    [Parameter] public string currentPageReportTemplate { get; set; } = "({currentPage} of {totalPages})";
    [Parameter] public string emptyMessage { get; set; } = "No records found";
    [Parameter] public string? sortField { get; set; } = null;
    [Parameter] public int? sortOrder { get; set; } = null;
    [Parameter] public RenderFragment? headerTemplate { get; set; }
    [Parameter] public RenderFragment<TItem>? listTemplate { get; set; }
    [Parameter] public RenderFragment<TItem>? gridTemplate { get; set; }
    [Parameter] public RenderFragment? footerTemplate { get; set; }
    [Parameter] public RenderFragment? paginatorLeftTemplate { get; set; }
    [Parameter] public RenderFragment? paginatorRightTemplate { get; set; }
    [Parameter] public EventCallback<PageState> page { get; set; }
    [Parameter] public bool lazy { get; set; } = false;
    private int d_first;
    private int d_rows;
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            d_first = first;
            d_rows = rows;
        }
        else
        {
            if (d_first != first)
                d_first = first;
            if (d_rows != rows)
                d_rows = rows;
        }
    }
    private async Task onPage(PageState mouseEvent)
    {
        this.d_first = mouseEvent.first;
        this.d_rows = mouseEvent.rows;
        List<TItem>? data = this.value;
        await firstChanged.InvokeAsync(this.d_first);
        await rowsChanged.InvokeAsync(this.d_rows);
        await page.InvokeAsync(mouseEvent);
    }
    private List<TItem>? sort()
    {
        if (this.value != null)
        {
            List<TItem> thisValue = new List<TItem>();
            thisValue.AddRange(this.value);
            thisValue.Sort((data1, data2) =>
            {
                object? value1 = ObjectUtils.ResolveFieldData(data1, this.sortField);
                object? value2 = ObjectUtils.ResolveFieldData(data2, this.sortField);
                int? result = null;
                if (value1 == null && value2 != null)
                    result = -1;
                else if (value != null && value2 == null)
                    result = 1;
                else if (value1 == null && value2 == null)
                    result = 0;
                else if (value1 is string && value2 is string)
                    result = string.Compare(value1 as string, value2 as string, StringComparison.Ordinal);
                else
                {
                    int value1Int = (int)value1;
                    int value2Int = (int)value2;
                    result = (value1Int < value2Int) ? -1 : (value1Int > value2Int) ? 1 : 0;
                }
                return (this.sortOrder.Value * result.Value);
            });
            return thisValue;
        }
        else
        {
            return null;
        }
    }
    private string containerClass
    {
        get
        {
            string str = "p-dataview p-component";
            switch (this.layout)
            {
                case "list":
                    str += " p-dataview-list";
                    break;
                case "grid":
                    str += " p-dataview-grid";
                    break;
            }
            return str;
        }
    }
    private int getTotalRecords
    {
        get
        {
            if (this.totalRecords != null)
                return this.totalRecords;
            else
                return this.value != null ? this.value.Count : 0;
        }
    }
    private bool isEmpty
    {
        get
        {
            return this.value == null || this.value.Count == 0;
        }
    }
    private bool paginatorTop
    {
        get
        {
            if (!string.IsNullOrWhiteSpace(this.paginatorPosition) && (!this.paginatorPosition.Equals("bottom") || this.paginatorPosition.Equals("both")))
                return true;
            else
                return false;
        }
    }
    private bool paginatorBottom
    {
        get
        {
            if (!string.IsNullOrWhiteSpace(this.paginatorPosition) && (!this.paginatorPosition.Equals("top") || this.paginatorPosition.Equals("both")))
                return true;
            else
                return false;
        }
    }
    private List<TItem>? items
    {
        get
        {
            if (value != null && value.Count > 0)
            {
                if (this.paginator)
                {
                    List<TItem>? data = this.value;
                    if (data != null && data.Count > 0 && !string.IsNullOrWhiteSpace(this.sortField))
                    {
                        data = this.sort();
                    }
                    if (this.paginator)
                    {
                        int first = this.lazy ? 0 : this.d_first;
                        return data.GetRange(first, first + this.d_rows);
                    }
                    else
                        return data;
                }
                else
                    return value;
            }
            else
                return null;
        }
    }
}