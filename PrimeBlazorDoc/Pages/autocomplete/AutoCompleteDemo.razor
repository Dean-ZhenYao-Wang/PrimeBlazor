@page "/autocomplete"
@inject Service.CountryService countryService
<div>
    <div class="content-section introduction">
        <div class="feature-intro">
            <h1>AutoComplete</h1>
            <p>AutoComplete is an input component that provides real-time suggestions when being typed.</p>
        </div>
    </div>

    <div class="content-section implementation">
        <h3 class="first">Basic</h3>
        <AutoComplete @bind-model="selectedCountry" suggestions="filteredCountriesBasic" complete="async(e)=>await searchCountryBasic(e)" field="name" />
        <span style="marginLeft: .5em">Country:@(selectedCountry == null ? "none" : selectedCountry.name)</span>

        <h3>Dropdown and Templating</h3>
        <AutoComplete @bind-model="brand" suggestions="filteredBrands" complete="async(e)=>searchBrand(e)" placeholder="Hint: type 'v' or 'f'" dropdown="true">
            <template Context="item">
                <div class="p-clearfix p-autocomplete-brand-item">
                    <img alt="@item" src="/demo/images/car/@(item).png" />
                    <div>@item</div>
                </div>
            </template>
        </AutoComplete>
        <span style="marginLeft: .5em">Brand: @(brand==null?"none":brand) </span>

       @*  <h3>Multiple</h3>
        <span class="p-fluid">
        <AutoComplete multiple="true" @bind-model="selectedCountries" suggestions="filteredCountriesMultiple" complete="async(e)=>await searchCountryMultiple(e)" field="name" />
        </span>
        <ul>
        @foreach(var c in selectedCountries)
        {
            int i = selectedCountries.IndexOf(c);
            <li @key="i">@c</li>
        }
        </ul> *@
    </div>
</div>
<style lang="scss">
    .p-autocomplete-brand-item {
        img {
            width: 32px;
            display: inline-block;
            margin: 5px 0 2px 5px;
        }

        div {
            font-size: 16px;
            float: right;
            margin: 10px 10px 0 0;
        }
    }
</style>
@code {
    private List<Models.Countries>? countries = null;
    private Models.Countries? selectedCountry = null;
    private List<Models.Countries>? filteredCountriesBasic = null;
    private List<Models.Countries> selectedCountries = new List<Models.Countries>();
    private List<Models.Countries>? filteredCountriesMultiple = null;
    private List<string>? brands = null;
    private string? brand = null;
    private List<string>? filteredBrands = null;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.countries = await this.countryService.getCountries();
            this.brands = new List<string>() { "Audi", "BMW", "Fiat", "Ford", "Honda", "Jaguar", "Mercedes", "Renault", "Volvo" };
            StateHasChanged();
        }
    }
    private async Task<List<Models.Countries>> searchCountry(string query)
    {
        return this.countries.Where(m => m.name.ToLower().StartsWith(query.ToLower())).ToList();
    }
    private async Task searchCountryBasic(string query)
    {
        this.filteredCountriesBasic = await this.searchCountry(query);
    }
    private async Task searchCountryMultiple(string query)
    {
        this.filteredCountriesMultiple =await this.searchCountry(query);
    }
    private async Task searchBrand(string query)
    {
        List<string> result = new List<string>();
        if (query.Length == 0)
            result.AddRange(this.brands);
        else
            result = this.brands.Where(m => m.ToLower().StartsWith(query.ToLower())).ToList();
        this.filteredBrands = result;
    }
}
