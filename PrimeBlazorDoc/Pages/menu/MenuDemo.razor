@page "/menu"
@inject IJSRuntime js
@inject NavigationManager NavigationManager
<div>
    <div class="content-section introduction">
        <div class="feature-intro">
            <h1>Menu</h1>
            <p>Menu is a navigation / command component that supports dynamic and static positioning..</p>
        </div>
    </div>

    <div class="content-section implementation">
        <h3 class="first">Inline</h3>
        <Menu model="items" />

        <h3>Overlay</h3>
        <Button label="Toggle" onclick="jsToggle" />
        <Menu @ref="menu" model="items" popup="true" />
    </div>

    <MenuDoc />
</div>

@code {
    private static IJSRuntime JS;
    private static NavigationManager Navigation;
    private Menu menu;
    protected override void OnInitialized()
    {
        JS = js;
        Navigation = NavigationManager;
    }
    private List<Menu> items = new List<Menu>(){
               new Menu() {
                    label= "Options",
                    items= new List<Menu>()
                    {
                        new Menu(){
                            label= "Update",
                            icon= "pi pi-refresh",
                            command = (CommandEventArgs commandEvent) =>
                            {
                                ToastEventBus.add(new Message(){severity="success", summary="Updated", detail="Data Updated", life= 3000});
                            }
                        },
                        new Menu(){
                            label= "Delete",
                            icon= "pi pi-times",
                            command= (CommandEventArgs commandEvent) =>
                            {
                                ToastEventBus.add(new Message(){ severity= "warn", summary= "Delete", detail= "Data Deleted", life= 3000});
                            }
                        }
                    }
               },
               new Menu()
               {
                    label= "Navigate",
                    items= new List<Menu>()
                    {
                        new Menu(){
                            label= "Vue Website",
                            icon= "pi pi-external-link",
                            command=async (CommandEventArgs commandEvent) =>
                            {
                                await JS.InvokeVoidAsync("setLocationHref","https://vuejs.org/");
                            }
                        },
                        new Menu(){
                            label = "Upload",
                            icon = "pi pi-upload",
                            command = (CommandEventArgs commandEvent) =>
                            {
                                var uri = Navigation.BaseUri;
                                  var newUri = $"{uri}fileupload";
                                  Navigation.NavigateTo(newUri, forceLoad: true);
                            }
                        }
                    }
               }

    };
    private IJSObjectReference module;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/menu/MenuDemo.razor.js");
        }
    }
    private async Task jsToggle(MouseEventArgs mouseEvent)
    {
        await JS.InvokeVoidAsync("MenuDemo.toggle", mouseEvent, this.menu.id);
    }
    private void save()
    {
        ToastEventBus.add(new Message() { severity = "success", summary = "Success", detail = "Data Saved", life = 3000 });
    }
}