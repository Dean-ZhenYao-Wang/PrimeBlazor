@page "/splitbutton"
@inject IJSRuntime js
@inject NavigationManager NavigationManager
<div>
    <div class="content-section introduction">
        <div class="feature-intro">
            <h1>SplitButton</h1>
            <p>SplitButton groups a set of commands in an overlay with a default command.</p>
        </div>
    </div>

    <div class="content-section implementation">
        <h3 class="first">Basic</h3>
        <SplitButton label="Save" icon="pi pi-plus" onclick="save" model="items"></SplitButton>

        <h3>Severities</h3>
        <SplitButton label="Save" icon="pi pi-plus" model="items"></SplitButton>
        <SplitButton label="Save" icon="pi pi-plus" model="items" CssClass="p-button-secondary"></SplitButton>
        <SplitButton label="Save" icon="pi pi-plus" model="items" CssClass="p-button-success"></SplitButton>
        <SplitButton label="Save" icon="pi pi-plus" model="items" CssClass="p-button-info"></SplitButton>
        <SplitButton label="Save" icon="pi pi-plus" model="items" CssClass="p-button-warning"></SplitButton>
        <SplitButton label="Save" icon="pi pi-plus" model="items" CssClass="p-button-danger"></SplitButton>
    </div>
    <SplitButtonDoc/>
</div>
<style lang="scss" scoped>
    .p-splitbutton {
        margin-right: .5em;
    }
</style>
@code {
    private static IJSRuntime JS;
    private static NavigationManager Navigation;
    protected override void OnInitialized()
    {
        JS = js;
        Navigation = NavigationManager;
    }
    List<Menu> items = new List<Menu>()
    {
       new Menu(){
                    label= "Update",
                    icon= "pi pi-refresh",
                    command= (CommandEventArgs eventArgs) => {
                        ToastEventBus.add(new Message(){severity="success", summary="Updated", detail="Data Updated", life= 3000});
                    }
                },
               new Menu() {
                    label= "Delete",
                    icon= "pi pi-times",
                    command= (CommandEventArgs eventArgs) => {
                        ToastEventBus.add(new Message(){ severity= "warn", summary= "Delete", detail= "Data Deleted", life= 3000});
                    }
                },
             new Menu()   {
                    label= "Vue Website",
                    icon= "pi pi-external-link",
                    command= async (CommandEventArgs eventArgs) => {
                        // window.location.href = "https=//vuejs.org/";
                       await JS.InvokeVoidAsync("setLocationHref","https://vuejs.org/");
                    }
                },
            new Menu()    {
                label= "Upload",
                    icon= "pi pi-upload",
                    command= (CommandEventArgs eventArgs) => {
                          var uri = Navigation.BaseUri;
                          var newUri = $"{uri}fileupload";
                          Navigation.NavigateTo(newUri, forceLoad: true);
                        // window.location.hash = "/fileupload";
                    }
                }
    };
    private void save()
    {
        ToastEventBus.add(new Message { severity = "success", summary = "Success", detail = "Data Saved", life = 3000 });
    }
}
